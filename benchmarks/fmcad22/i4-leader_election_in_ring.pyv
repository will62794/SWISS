sort node
sort id

immutable relation le(id, id) @no_minimize
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)

immutable relation btw(node, node, node) @no_minimize
axiom btw(W, X, Y) & btw(W, Y, Z) -> btw(W, X, Z)
axiom btw(W, X, Y) -> !btw(W, Y, X)
axiom btw(W, X, Y) | btw(W, Y, X) | W = X | W = Y | X = Y
axiom btw(X, Y, Z) -> btw(Y, Z, X)

immutable function idn(node): id
axiom idn(X) = idn(Y) -> X = Y  # the idn function is injective

mutable relation leader(node)
mutable relation pending(id, node)

init !leader(N)
init !pending(V, N)

transition send(n: node, n1: node)
    modifies pending
    & (n != n1 & ((Z != n & Z != n1) -> btw(n, n1, Z)))
    & (pending(V, N) <-> old(pending(V, N)) | (V = idn(n) & N = n1))

transition become_leader(n: node)
    modifies leader
    & (old(pending(idn(n), n)))
    & (leader(N) <-> old(leader(N)) | (N = n))

transition receive(n: node, m: id, n1: node)
    modifies pending
    & old(pending(m, n))
    & (n != n1 & ((Z != n & Z != n1) -> btw(n, n1, Z)))
    & if le(idn(n), m)
      then 
      & (pending(V, N) <-> old(pending(V, N)) | (V = m & N = n1))
      else 
      & (pending(V, N) <-> old(pending(V, N)))

safety [leader_unique] forall X: node, Y:node. leader(X) & leader(Y) -> X = Y
